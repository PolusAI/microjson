# generated by datamodel-codegen:
#   filename:  Feature.json
#   timestamp: 2023-06-01T19:31:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    feature = 'Feature'


class Type34(Enum):
    point = 'Point'


class GeometryItem(BaseModel):
    type: Type34
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type35(Enum):
    line_string = 'LineString'


class Coordinate(BaseModel):
    __root__: List[Any]


class GeometryItem8(BaseModel):
    type: Type35
    coordinates: List[Coordinate] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type36(Enum):
    polygon = 'Polygon'


class GeometryItem9(BaseModel):
    type: Type36
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type37(Enum):
    multi_point = 'MultiPoint'


class GeometryItem10(BaseModel):
    type: Type37
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type38(Enum):
    multi_line_string = 'MultiLineString'


class GeometryItem11(BaseModel):
    type: Type38
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type39(Enum):
    multi_polygon = 'MultiPolygon'


class GeometryItem12(BaseModel):
    type: Type39
    coordinates: List[List[List[Coordinate]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type40(Enum):
    geometry_collection = 'GeometryCollection'


class Geometry(GeometryItem):
    pass


class Geometry13(GeometryItem8):
    pass


class Geometry14(GeometryItem9):
    pass


class Geometry15(GeometryItem10):
    pass


class Geometry16(GeometryItem11):
    pass


class Geometry17(GeometryItem12):
    pass


class GeometryItem13(BaseModel):
    type: Type40
    geometries: List[
        Union[Geometry, Geometry13, Geometry14, Geometry15, Geometry16, Geometry17]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonFeature(BaseModel):
    type: Type
    id: Optional[Union[float, str]] = None
    properties: Optional[Dict[str, Any]]
    geometry: Optional[
        Union[
            GeometryItem,
            GeometryItem8,
            GeometryItem9,
            GeometryItem10,
            GeometryItem11,
            GeometryItem12,
            GeometryItem13,
        ]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)
