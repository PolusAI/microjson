"""Microjson. Auto-generated by datamodel-codegen"""

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type75(Enum):
    feature = "Feature"


class Type76(Enum):
    point = "Point"


class GeometryItem21(BaseModel):
    type: Type76
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type77(Enum):
    line_string = "LineString"


class Coordinate43(BaseModel):
    __root__: List[Any]


class GeometryItem22(BaseModel):
    type: Type77
    coordinates: List[Coordinate43] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type78(Enum):
    polygon = "Polygon"


class Coordinate44(Coordinate43):
    pass


class GeometryItem23(BaseModel):
    type: Type78
    coordinates: List[List[Coordinate44]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type79(Enum):
    multi_point = "MultiPoint"


class GeometryItem24(BaseModel):
    type: Type79
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type80(Enum):
    multi_line_string = "MultiLineString"


class Coordinate45(Coordinate43):
    pass


class GeometryItem25(BaseModel):
    type: Type80
    coordinates: List[List[Coordinate45]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type81(Enum):
    multi_polygon = "MultiPolygon"


class Coordinate46(Coordinate43):
    pass


class GeometryItem26(BaseModel):
    type: Type81
    coordinates: List[List[List[Coordinate46]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type82(Enum):
    geometry_collection = "GeometryCollection"


class Geometry30(GeometryItem21):
    pass


class Coordinate47(Coordinate43):
    pass


class Geometry31(BaseModel):
    type: Type77
    coordinates: List[Coordinate47] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Coordinate48(Coordinate43):
    pass


class Geometry32(BaseModel):
    type: Type78
    coordinates: List[List[Coordinate48]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Geometry33(GeometryItem24):
    pass


class Coordinate49(Coordinate43):
    pass


class Geometry34(BaseModel):
    type: Type80
    coordinates: List[List[Coordinate49]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Coordinate50(Coordinate43):
    pass


class Geometry35(BaseModel):
    type: Type81
    coordinates: List[List[List[Coordinate50]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeometryItem27(BaseModel):
    type: Type82
    geometries: List[
        Union[Geometry30,
              Geometry31,
              Geometry32,
              Geometry33,
              Geometry34,
              Geometry35]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonFeature(BaseModel):
    type: Type75
    id: Optional[Union[float, str]] = None
    properties: Union[Any, Dict[str, Any]]
    geometry: Optional[
        Union[
            GeometryItem21,
            GeometryItem22,
            GeometryItem23,
            GeometryItem24,
            GeometryItem25,
            GeometryItem26,
            GeometryItem27,
        ]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)
