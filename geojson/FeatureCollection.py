# generated by datamodel-codegen:
#   filename:  FeatureCollection.json
#   timestamp: 2023-06-01T19:31:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    feature_collection = 'FeatureCollection'


class Type12(Enum):
    feature = 'Feature'


class Type13(Enum):
    point = 'Point'


class GeometryItem(BaseModel):
    type: Type13
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type14(Enum):
    line_string = 'LineString'


class Coordinate(BaseModel):
    __root__: List[Any]


class GeometryItem1(BaseModel):
    type: Type14
    coordinates: List[Coordinate] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type15(Enum):
    polygon = 'Polygon'


class GeometryItem2(BaseModel):
    type: Type15
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type16(Enum):
    multi_point = 'MultiPoint'


class GeometryItem3(BaseModel):
    type: Type16
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type17(Enum):
    multi_line_string = 'MultiLineString'


class GeometryItem4(BaseModel):
    type: Type17
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type18(Enum):
    multi_polygon = 'MultiPolygon'


class GeometryItem5(BaseModel):
    type: Type18
    coordinates: List[List[List[Coordinate]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type19(Enum):
    geometry_collection = 'GeometryCollection'


class Geometry(GeometryItem):
    pass


class Geometry7(GeometryItem1):
    pass


class Geometry8(GeometryItem2):
    pass


class Geometry9(GeometryItem3):
    pass


class Geometry10(GeometryItem4):
    pass


class Geometry11(GeometryItem5):
    pass


class GeometryItem6(BaseModel):
    type: Type19
    geometries: List[
        Union[Geometry, Geometry7, Geometry8, Geometry9, Geometry10, Geometry11]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Feature(BaseModel):
    type: Type12
    id: Optional[Union[float, str]] = None
    properties: Optional[Dict[str, Any]]
    geometry: Optional[
        Union[
            GeometryItem,
            GeometryItem1,
            GeometryItem2,
            GeometryItem3,
            GeometryItem4,
            GeometryItem5,
            GeometryItem6,
        ]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonFeaturecollection(BaseModel):
    type: Type
    features: List[Feature]
    bbox: Optional[List[float]] = Field(None, min_items=4)
