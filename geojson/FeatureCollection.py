"""Microjson. Auto-generated by datamodel-codegen"""

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type53(Enum):
    feature_collection = 'FeatureCollection'


class Type54(Enum):
    feature = 'Feature'


class Type55(Enum):
    point = 'Point'


class GeometryItem14(BaseModel):
    type: Type55
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type56(Enum):
    line_string = 'LineString'


class Coordinate31(BaseModel):
    __root__: List[Any]


class GeometryItem15(BaseModel):
    type: Type56
    coordinates: List[Coordinate31] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type57(Enum):
    polygon = 'Polygon'


class Coordinate32(Coordinate31):
    pass


class GeometryItem16(BaseModel):
    type: Type57
    coordinates: List[List[Coordinate32]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type58(Enum):
    multi_point = 'MultiPoint'


class GeometryItem17(BaseModel):
    type: Type58
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type59(Enum):
    multi_line_string = 'MultiLineString'


class Coordinate33(Coordinate31):
    pass


class GeometryItem18(BaseModel):
    type: Type59
    coordinates: List[List[Coordinate33]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type60(Enum):
    multi_polygon = 'MultiPolygon'


class Coordinate34(Coordinate31):
    pass


class GeometryItem19(BaseModel):
    type: Type60
    coordinates: List[List[List[Coordinate34]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type61(Enum):
    geometry_collection = 'GeometryCollection'


class Geometry24(GeometryItem14):
    pass


class Coordinate35(Coordinate31):
    pass


class Geometry25(BaseModel):
    type: Type56
    coordinates: List[Coordinate35] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Coordinate36(Coordinate31):
    pass


class Geometry26(BaseModel):
    type: Type57
    coordinates: List[List[Coordinate36]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Geometry27(GeometryItem17):
    pass


class Coordinate37(Coordinate31):
    pass


class Geometry28(BaseModel):
    type: Type59
    coordinates: List[List[Coordinate37]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Coordinate38(Coordinate31):
    pass


class Geometry29(BaseModel):
    type: Type60
    coordinates: List[List[List[Coordinate38]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeometryItem20(BaseModel):
    type: Type61
    geometries: List[
        Union[Geometry24,
              Geometry25,
              Geometry26,
              Geometry27,
              Geometry28,
              Geometry29]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Feature1(BaseModel):
    type: Type54
    id: Optional[Union[float, str]] = None
    properties: Union[Any, Dict[str, Any]]
    geometry: Optional[
        Union[
            GeometryItem14,
            GeometryItem15,
            GeometryItem16,
            GeometryItem17,
            GeometryItem18,
            GeometryItem19,
            GeometryItem20,
        ]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonFeaturecollection(BaseModel):
    type: Type53
    features: List[Feature1]
    bbox: Optional[List[float]] = Field(None, min_items=4)
