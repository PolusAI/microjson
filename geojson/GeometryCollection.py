"""Microjson. Auto-generated by datamodel-codegen"""

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field


class Type45(Enum):
    geometry_collection = 'GeometryCollection'


class Type46(Enum):
    point = 'Point'


class Geometry18(BaseModel):
    type: Type4# generated by datamodel-codegen:
#   filename:  GeoJSON.json
#   timestamp: 2023-06-28T15:38:42+00:00onal[List[float]] = Field(None, min_items=4)


class Type47(Enum):
    line_string = 'LineString'


class Coordinate26(BaseModel):
    __root__: List[Any]


class Geometry19(BaseModel):
    type: Type47
    coordinates: List[Coordinate26] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type48(Enum):
    polygon = 'Polygon'


class Coordinate27(Coordinate26):
    pass


class Geometry20(BaseModel):
    type: Type48
    coordinates: List[List[Coordinate27]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type49(Enum):
    multi_point = 'MultiPoint'


class Geometry21(BaseModel):
    type: Type49
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type50(Enum):
    multi_line_string = 'MultiLineString'


class Coordinate28(Coordinate26):
    pass


class Geometry22(BaseModel):
    type: Type50
    coordinates: List[List[Coordinate28]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type51(Enum):
    multi_polygon = 'MultiPolygon'


class Coordinate29(Coordinate26):
    pass


class Geometry23(BaseModel):
    type: Type51
    coordinates: List[List[List[Coordinate29]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonGeometrycollection(BaseModel):
    type: Type45
    geometries: List[
        Union[Geometry18, Geometry19, Geometry20, Geometry21, Geometry22, Geometry23]
    ]
    bbox: Optional[List[float]] = Field(None, min_items=4)
