# generated by datamodel-codegen:
#   filename:  Geometry.json
#   timestamp: 2023-06-01T19:31:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    point = 'Point'


class GeojsonGeometryItem(BaseModel):
    type: Type
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type27(Enum):
    line_string = 'LineString'


class Coordinate(BaseModel):
    __root__: List[Any]


class GeojsonGeometryItem1(BaseModel):
    type: Type27
    coordinates: List[Coordinate] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type28(Enum):
    polygon = 'Polygon'


class GeojsonGeometryItem2(BaseModel):
    type: Type28
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type29(Enum):
    multi_point = 'MultiPoint'


class GeojsonGeometryItem3(BaseModel):
    type: Type29
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type30(Enum):
    multi_line_string = 'MultiLineString'


class GeojsonGeometryItem4(BaseModel):
    type: Type30
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type31(Enum):
    multi_polygon = 'MultiPolygon'


class GeojsonGeometryItem5(BaseModel):
    type: Type31
    coordinates: List[List[List[Coordinate]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeojsonGeometry(BaseModel):
    __root__: Union[
        GeojsonGeometryItem,
        GeojsonGeometryItem1,
        GeojsonGeometryItem2,
        GeojsonGeometryItem3,
        GeojsonGeometryItem4,
        GeojsonGeometryItem5,
    ] = Field(..., title='GeoJSON Geometry')
