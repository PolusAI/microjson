# generated by datamodel-codegen:
#   filename:  microjson_schema.json
#   timestamp: 2023-06-13T12:15:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Type(Enum):
    point = 'Point'


class Point(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type = Field(..., title='Type')
    coordinates: List[float] = Field(..., max_items=3, min_items=2, title='Coordinates')


class Type1(Enum):
    multi_point = 'MultiPoint'


class MultiPoint(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type1 = Field(..., title='Type')
    coordinates: List[List[float]] = Field(..., title='Coordinates')


class Type2(Enum):
    line_string = 'LineString'


class LineString(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type2 = Field(..., title='Type')
    coordinates: List[List[float]] = Field(..., title='Coordinates')


class Type3(Enum):
    multi_line_string = 'MultiLineString'


class MultiLineString(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type3 = Field(..., title='Type')
    coordinates: List[List[List[float]]] = Field(..., title='Coordinates')


class Type4(Enum):
    polygon = 'Polygon'


class Polygon(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type4 = Field(..., title='Type')
    coordinates: List[List[List[float]]] = Field(..., title='Coordinates')


class Type5(Enum):
    multi_polygon = 'MultiPolygon'


class MultiPolygon(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type5 = Field(..., title='Type')
    coordinates: List[List[List[List[float]]]] = Field(..., title='Coordinates')


class Type6(Enum):
    geometry_collection = 'GeometryCollection'


class GeometryCollection(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type6 = Field(..., title='Type')
    geometries: List[
        Union[Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon]
    ] = Field(..., title='Geometries')


class Unit(Enum):
    pixel = 'pixel'
    meter = 'meter'
    decimeter = 'decimeter'
    centimeter = 'centimeter'
    millimeter = 'millimeter'
    micrometer = 'micrometer'
    nanometer = 'nanometer'
    picometer = 'picometer'
    radian = 'radian'
    degree = 'degree'


class Axe(Enum):
    x = 'x'
    y = 'y'
    z = 'z'
    r = 'r'
    theta = 'theta'
    phi = 'phi'


class Coordinatesystem(BaseModel):
    axes: List[Axe] = Field(..., title='Axes')
    units: Optional[List[Unit]] = None
    pixels_per_unit: Optional[List[float]] = Field(
        None, alias='pixelsPerUnit', title='Pixelsperunit'
    )


class Type7(Enum):
    feature = 'Feature'


class MicroFeature(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type7 = Field(..., title='Type')
    geometry: Union[
        Point,
        MultiPoint,
        LineString,
        MultiLineString,
        Polygon,
        MultiPolygon,
        GeometryCollection,
    ] = Field(
        ...,
        description='The geometry of the\n                                   feature',
        title='Geometry',
    )
    properties: Dict[str, Any] = Field(
        ...,
        description='Properties of the\n                                       feature',
        title='Properties',
    )
    id: Optional[Union[str, int]] = Field(None, title='Id')
    coordinatesystem: Optional[Coordinatesystem] = None


class Feature(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type7 = Field(..., title='Type')
    geometry: Union[
        Point,
        MultiPoint,
        LineString,
        MultiLineString,
        Polygon,
        MultiPolygon,
        GeometryCollection,
    ] = Field(
        ...,
        description='The geometry of the\n                                   feature',
        title='Geometry',
    )
    properties: Dict[str, Any] = Field(
        ...,
        description='Properties of the\n                                       feature',
        title='Properties',
    )
    id: Optional[Union[str, int]] = Field(None, title='Id')


class Type9(Enum):
    feature_collection = 'FeatureCollection'


class MicroFeatureCollection(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type9 = Field(..., title='Type')
    features: List[Feature] = Field(..., title='Features')
    coordinatesystem: Optional[Coordinatesystem] = None


class MicroPoint(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type = Field(..., title='Type')
    coordinates: List[float] = Field(..., max_items=3, min_items=2, title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None
    radius: Optional[float] = Field(None, title='Radius')


class MicroMultiPoint(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type1 = Field(..., title='Type')
    coordinates: List[List[float]] = Field(..., title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None


class MicroLineString(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type2 = Field(..., title='Type')
    coordinates: List[List[float]] = Field(..., title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None


class MicroMultiLineString(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type3 = Field(..., title='Type')
    coordinates: List[List[List[float]]] = Field(..., title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None


class Subtype(Enum):
    rectangle = 'rectangle'
    cuboid = 'cuboid'


class MicroPolygon(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type4 = Field(..., title='Type')
    coordinates: List[List[List[float]]] = Field(..., title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None
    subtype: Optional[Subtype] = Field(None, title='Subtype')


class MicroMultiPolygon(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type5 = Field(..., title='Type')
    coordinates: List[List[List[List[float]]]] = Field(..., title='Coordinates')
    coordinatesystem: Optional[Coordinatesystem] = None


class MicroGeometryCollection(BaseModel):
    bbox: Optional[List[float]] = Field(None, min_items=4, title='Bbox')
    type: Type6 = Field(..., title='Type')
    geometries: List[
        Union[Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon]
    ] = Field(..., title='Geometries')
    coordinatesystem: Optional[Coordinatesystem] = None


class MicroJSON(BaseModel):
    __root__: Union[
        MicroFeature,
        MicroFeatureCollection,
        MicroPoint,
        MicroMultiPoint,
        MicroLineString,
        MicroMultiLineString,
        MicroPolygon,
        MicroMultiPolygon,
        MicroGeometryCollection,
    ] = Field(..., description='The root object of a MicroJSON file', title='MicroJSON')
